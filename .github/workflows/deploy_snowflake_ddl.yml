name: Deploy Snowflake DDL

on:
  push:
    branches:
      - main # Or your primary branch
    paths:
      - 'ddl/isrctn**.sql'
  workflow_dispatch: # Allows manual triggering

jobs:
  deploy-ddl-to-snowflake:
    name: Deploy DDL to Snowflake
    runs-on: ubuntu-latest
    environment: ClinicalTrialsELT # Optional: If you set up GitHub environments for approvals/protection

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup SnowSQL
        run: |
          echo "Downloading SnowSQL..."
          curl -O https://sfc-repo.snowflakecomputing.com/snowsql/bootstrap/1.3/linux_x86_64/snowsql-1.4.0-linux_x86_64.bash # Check for latest version
          echo "Making SnowSQL installer executable..."
          chmod +x snowsql-1.4.0-linux_x86_64.bash
          echo "Installing SnowSQL..."
          # The installer might prompt for install location, accept defaults or specify non-interactively if possible.
          # This approach attempts a non-interactive install.
          # If it prompts, this step might need adjustment based on installer behavior.
          # Consider pre-installing SnowSQL in a custom Docker image for more control.
          ./snowsql-1.4.0-linux_x86_64.bash <<INSTALL_CONFIRM
          
          y
          ~/.snowsql << INSTALL_CONFIRM
          echo "Adding SnowSQL to PATH"
          echo "$HOME/.snowsql" >> $GITHUB_PATH
          echo "SnowSQL version:"
          ~/.snowsql/snowsql -v
        shell: bash

      - name: Run Snowflake DDLs
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
        run: |
          # echo "$HOME/.snowsql" >> $GITHUB_PATH 
          echo "Connecting to Snowflake: User $SNOWFLAKE_USER, Role $SNOWFLAKE_ROLE, DB $SNOWFLAKE_DATABASE, Schema $SNOWFLAKE_SCHEMA"
          
          # Ensure schema exists or create it (optional, can be part of DDLs)
          # snowsql -q "CREATE SCHEMA IF NOT EXISTS IDENTIFIER('\"$SNOWFLAKE_DATABASE\".\"$SNOWFLAKE_SCHEMA\"');" \
          #   -o exit_on_error=true \
          #   -o friendly=false \
          #   -o header=false \
          #   -o output_format=plain
            
          echo "Looking for DDL files in ddl/ ..."
          # Sort files to ensure ordered execution if numbering is used (e.g., 001_, 002_)
          find ddl -name '*.sql' -print0 | sort -z | while IFS= read -r -d $'\0' ddl_file; do
            echo "Executing DDL: $ddl_file"
            ~/.snowsql/snowsql -q "!USE DATABASE IDENTIFIER('\"$SNOWFLAKE_DATABASE\"'); !USE SCHEMA IDENTIFIER('\"$SNOWFLAKE_SCHEMA\"'); !USE ROLE IDENTIFIER('\"$SNOWFLAKE_ROLE\"'); !USE WAREHOUSE IDENTIFIER('\"$SNOWFLAKE_WAREHOUSE\"'); $(cat "$ddl_file")" \
              -o exit_on_error=true \
              -o friendly=false \
              -o header=false \
              -o output_format=plain \
              -o timing=true
            if [ $? -ne 0 ]; then
              echo "Error executing $ddl_file. Aborting."
              exit 1
            fi
            echo "Successfully executed $ddl_file"
            echo "------------------------------------"
          done
          echo "All DDL files processed successfully."